# -*- coding: utf-8 -*-
"""Job title similarity

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19rEhGzZ2OFio_tr1xok9Lt6ax5KX-QQx
"""

import nltk

nltk.download("stopwords")

!pip install pymongo

from pymongo import MongoClient

!pip install dnspython

def connect_to_collection(collection_name):
    # URL to the cluster is to be obtained from MongoDB Altas
    # when mongodb is installed on the local machine, "+srv" is not required.
    cluster = "mongodb+srv://admin:QEH3uMoNdXTXD5mA@cmpt733-final-project.ikzc6.mongodb.net/EmployeeRetentionDB?retryWrites=true&w=majority"
    client = MongoClient(cluster)
    # This command will create a database. (If it already exists, this will access the existing database.)
    db = client["EmployeeRetentionDB"]
    # Following commands will create a collection. (If it already exists, this will access the existing collection.)
    doc = db[collection_name]

    return doc

# Connect to MongoDB and obtain "JobPosts" collection
jobpost_collect = connect_to_collection("JobPosts")
# Connect to MongoDB and Obtain "AverageSalary" collection
avgsal_collect = connect_to_collection("AverageSalary")
# Connect to MongoDB and obtain "Employees" collection
employees_collect = connect_to_collection("Employees")

import pandas as pd
# for document in jobs.find({'search_kw': 'Laboratory Technician'}):
df = pd.DataFrame(list(jobpost_collect.find()))

df_emp = df

nltk.download('punkt')

import re
from nltk.corpus import stopwords
import pandas as pd
stop_words = set(stopwords.words('english'))

def get_first_title(title):
    # keep "co-founder, co-ceo, etc"
    title = re.sub(r"[Cc]o[\-\ ]","", title)
    split_titles = re.split(r"\,|\-|\||\&|\:|\/|and", title)
    print(split_titles)
    return split_titles[0].strip()

def get_title_features(title):
    features = {}
    word_tokens = nltk.word_tokenize(title)
    filtered_words = [w for w in word_tokens if not w in stop_words] 
    for word in filtered_words:
        features['contains({})'.format(word.lower())] = True
    if len(filtered_words) > 0:
        first_key = 'first({})'.format(filtered_words[0].lower())
        last_key = 'last({})'.format(filtered_words[-1].lower())
        features[first_key] = True
        features[last_key] = True
    return features

{
    "contains(director)": True,
    "contains(global)": True,
    "contains(operations)": True,
    "first(director)": True,
    "last(operations)": True
}

raw_job_titles = [
    {
        "title": "Healthcare Representative",
        "responsibility": "Strategy",
        "department": "Research & Development"
    },
    {
        "title": "Human Resources",
        "responsibility": "Execution",
        "department": "Human Resources"
    },
    {
        "title": "Laboratory Technician",
        "responsibility": "Execution",
        "department": "Research & Development"
    },
    {
        "title": "Manager",
        "responsibility": "Execution",
        "department": "Sales"
    },
    {
        "title": "Manager",
        "responsibility": "Execution",
        "department": "Research & Development"
    },
    {
        "title": "Manager",
        "responsibility": "Execution",
        "department": "Human Resources"
    },

    {
        "title": "Manufacturing Director",
        "responsibility": "Execution",
        "department": "Research & Development"
    },
    {
        "title": "Research Director",
        "responsibility": "Execution",
        "department": "Research & Development"
    },
    {
        "title": "Research Scientist",
        "responsibility": "Execution",
        "department": "Research & Development"
    },
    {
        "title": "Sales Executive",
        "responsibility": "Execution",
        "department": "Sales"
    },
    {
        "title": "Sales Representative",
        "responsibility": "Execution",
        "department": "Sales"
    },
]

print(raw_job_titles)

# Responsibilities
given_title = [
    (
         get_title_features(job_title["title"]),
         job_title["department"]
    )
    for job_title in raw_job_titles
    if job_title["department"] is not None
]

# Responsibilities
r_size = int(len(given_title) * 0.5)
r_train_set = given_title[r_size:]
r_test_set = given_title[:r_size]
job_classifier = nltk.NaiveBayesClassifier.train(
    r_train_set
)
print("Responsibility classification accuracy: {}".format(
    nltk.classify.accuracy(
        job_classifier,
        r_test_set
    )
))

import numpy as np

titles = df_emp['job_title']
# print(titles, value)
# titles

for i in titles:
  title = i
  found_title = job_classifier.classify(
      get_title_features(title)
  )

  print("Job title: '{}'".format(title))

  print("Maps: '{}'".format(found_title))

  responsibility_probability = \
      job_classifier.prob_classify(
          get_title_features(title)
      )
  responsibility_probability = 100 * responsibility_probability.prob(
      responsibility_probability.max()
  )
  print("Responsibility confidence: {}%".format(
      round(responsibility_probability)
  ))

# Responsibility